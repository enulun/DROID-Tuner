# Patch written by @enulun
# 2023-03-28
#
# This patch makes it possible to utilize the Droid to tune a VCO, up to about pitch F6. When feeding higher pitches than F6 from the VCO into the Droid, it will start showing lower/wrong pitches.
# It has been tested towards the tuning function in Mordax Data to confirm correct pitches. It works well with sine, triangle and sawtooth from VCO. Squares isn't always working well.
#
#
# Patch need one P2B8 and one B32, in addition to the Master.
#
# Master: Panel is used to show values, I1 is used for the VCO to be tuned
#
# P2B8:
# Pot1: Sets how long time (higher accuracy) it will use to calculate the pitch, from 8s (Pot=0), to 80ms (Pot=0). Pot=0.5 (about 3s) to Pot=0.7 (less than 1s) works normally well.
# Pot2: Sets how near the VCO-signal need to be the max/min amplitude before it counts, from 1% (Pot=0) to 49% (Pot=1). Pot=1 works normally best, and is especially necessary for higher pitches.
#
#B32 shows pitch, and how good the VCO is tuned. 
#More information in this forum post and a few posts after this:
#modwiggler.com/forum/viewtopic.php?p=3933753#p3933753
#
#


[p2b8]
[b32]


# setting up counting frequency _HERTZ from 0.1 Hz - 100 Hz, i.e. each counting period from 10s - 10ms

# making sure _HERTZ is at least 0.1 Hertz (if it should be lower for some reason, for instance at patch-start)
[math]
    input1 = _HERTZ
    input2 = 0.1
    maximum = _HERTZ_AT_LEAST_0_POINT_1

# generating counting frequency from first pot
[math]
    input1 = 10
    input2 = P1.1 * 3 - 1
    power = _POT_HERTZ

# if _TICTOC (end of one measuring period last time), update to current _POT_HERTZ, otherwise keep current _HERTZ
[compare]
    input = _TICTOC
    compare = 1
    ifequal = _POT_HERTZ
    else = _HERTZ_AT_LEAST_0_POINT_1
    output = _HERTZ

# set the counting LFO
[lfo]
    hz = _HERTZ
    level = 1
    square = _CLOCK

# check clock when square goes from 0 to 1 ( _TICTOC = 1), which is where "everything" happens:

# copy _TIC to _TOC
[copy]
    input = _TIC
    output = _TOC

# set _TIC to 1 when _CLOCK is high
[sample]
    input = _CLOCK
    gate = 1
    output = _TIC

# set _TICTOC to 1 if _TIC is high, but _TOC is low (meaning last _TIC was low)
[logic]
    input1 = _TIC
    input2 = _TOC * _TIC
    xor = _TICTOC

# if _TICTOC, put min amplitude during last counting period into a queue
[queue]
    input = _NEW_MIN
    clock = _TICTOC
    output1 = _MI1
    output2 = _MI2
    output3 = _MI3
    output4 = _MI4
    output5 = _MI5
    output6 = _MI6
    output7 = _MI7
    output8 = _MI8

# if _TICTOC, put max amplitude during last counting period into a queue
[queue]
    input = _NEW_MAX
    clock = _TICTOC
    output1 = _MA1
    output2 = _MA2
    output3 = _MA3
    output4 = _MA4
    output5 = _MA5
    output6 = _MA6
    output7 = _MA7
    output8 = _MA8

# all the time, calculating the lowest minimum amplitude over the last 8 counting periods
[math]
    input1 = _MI1
    input2 = _MI2
    minimum = _MI12

[math]
    input1 = _MI3
    input2 = _MI4
    minimum = _MI34

[math]
    input1 = _MI5
    input2 = _MI6
    minimum = _MI56

[math]
    input1 = _MI7
    input2 = _MI8
    minimum = _MI78

[math]
    input1 = _MI12
    input2 = _MI34
    minimum = _MI1234

[math]
    input1 = _MI56
    input2 = _MI78
    minimum = _MI5678

[math]
    input1 = _MI1234
    input2 = _MI5678
    minimum = _LAST_MIN

# all the time, calculating the highest maximum amplitude over the last 8 counting periods
[math]
    input1 = _MA1
    input2 = _MA2
    minimum = _MA12

[math]
    input1 = _MA3
    input2 = _MA4
    minimum = _MA34

[math]
    input1 = _MA5
    input2 = _MA6
    minimum = _MA56

[math]
    input1 = _MA7
    input2 = _MA8
    minimum = _MA78

[math]
    input1 = _MA12
    input2 = _MA34
    minimum = _MA1234

[math]
    input1 = _MA56
    input2 = _MA78
    minimum = _MA5678

[math]
    input1 = _MA1234
    input2 = _MA5678
    minimum = _LAST_MAX

# all the time, this is where we read a new _SAMPLE from the VCO we are tuning
[sample]
    input = I1
    gate = 1
    output = _SAMPLE

# all the time, we choose the lowest of _SAMPLE and min amplitude so far this counting period
[math]
    input1 = _SAMPLE
    input2 = _NEW_MIN
    minimum = _NEW_MIN_SAMPLE

# all the time, we choose the highest of _SAMPLE and max amplitude so far this counting period
[math]
    input1 = _SAMPLE
    input2 = _NEW_MAX
    maximum = _NEW_MAX_SAMPLE

# if _TICTOC, we have already put _NEW_MIN into a queue, so we start a new _NEW_MIN with only the first new _SAMPLE
[compare]
    input = _TICTOC
    compare = 1
    ifequal = _SAMPLE
    else = _NEW_MIN_SAMPLE
    output = _NEW_MIN

# if _TICTOC, we have already put _NEW_MAX into a queue, so we start a new _NEW_MAX with only the first new _SAMPLE
[compare]
    input = _TICTOC
    compare = 1
    ifequal = _SAMPLE
    else = _NEW_MAX_SAMPLE
    output = _NEW_MAX

# all the time, in case the lowest minimum this counting period (_NEW_MIN) is lower than the lowest minimum during the last 8 counting periods (_LAST_MIN), we use the lowest of them for calculation
[math]
    input1 = _LAST_MIN
    input2 = _NEW_MIN
    minimum = _MIN

# all the time, same here with max, as we did with min over
[math]
    input1 = _LAST_MAX
    input2 = _NEW_MAX
    maximum = _MAX

# all the time, we use the _MIN and _MAX amplitude for the VCO signal we are tuning, and deciding how far away from this top or bottom amplitude of the signal we shall count another high or low.
# We call this distance _LIMIT, which can be adjusted from the second pot as a percent between 1% (almost at the top/bottom) to 49, (barely over/under the mid of the pulse amplitude), and multiply this with the total amplitude difference between minimum and maximum
[math]
    input1 = -1 * _MIN + _MAX
    input2 = P1.2 * 0.48 + 0.01
    product = _LIMIT

# checking if _SAMPLE is closer to _MIN than a distance equal to _LIMIT, if so, we set _LOW to 1, i.e. we are in low area that should be counted
[compare]
    input = _SAMPLE
    compare = _MIN + _LIMIT
    ifless = 1
    else = 0
    output = _LOW

# checking if _SAMPLE is closer to _MAX than a distance equal to _LIMIT, if so, we set _HIGH to 1, i.e. we are in high area that should be counted
[compare]
    input = _SAMPLE
    compare = -1 * _LIMIT + _MAX
    ifgreater = 1
    else = 0
    output = _HIGH

# each time the VCO signal goes to a high or a low area, we shall count, but only once until it has been in the other area first. _NEXT is taking care of which of low or high we counted last time, and which we shall count now (_NEXT=1 for next high, _NEXT=0 for next low)
# First, we set increment for high (_HIGH_INC) to 1 if we are both in high area (_HIGH=1), and _NEXT = 1 (high)
[copy]
    input = _HIGH * _NEXT
    output = _HIGH_INC

# Then, we set increment for low (_LOW_INC) to 1 if we are both in low area (_LOW=1), and _NEXT=0 (low). This can be expressed by the XOR-calculation under:
[logic]
    input1 = _LOW
    input2 = _LOW * _NEXT
    xor = _LOW_INC

# if either _LOW_INC or _HIGH_INC was set to 1 (checked for instance by comparing the sum of them to for instance 0.5), wee change the direction of _NEXT (if we counted a high, we must count low next time, and vice versa). Else we keep _NEXT
[compare]
    input = _LOW_INC + _HIGH_INC
    compare = 0.5
    ifgreater = -1 * _NEXT + 1
    else = _NEXT
    output = _NEXT

# if _TICTOC, add up counting of highs and lows into _COUNT. We must add them here, because next code under this is reseting this high- and low-countings.
[compare]
    input = _TICTOC
    compare = 1
    ifequal = _COUNT_LOW + _COUNT_HIGH
    else = 0
    output = _COUNT

# if _TICTOC, reset the counting of lows (_COUNT_LOW), i.e. set it to only whatever value of _LOW_INC, without regard of what _COUNT_LOW was before _TICTOC. Otherwise we are adding the current counting of lows with _LOW_INC (which can be 0 or 1)
[compare]
    input = _TICTOC
    compare = 1
    ifequal = _LOW_INC
    else = _COUNT_LOW + _LOW_INC
    output = _COUNT_LOW

# if _TICTOC, do same reset or count-update of highs, as we did with lows over.
[compare]
    input = _TICTOC
    compare = 1
    ifequal = _HIGH_INC
    else = _COUNT_HIGH + _HIGH_INC
    output = _COUNT_HIGH

# _COUNT is only updated each _TICTOC, and is the total number of lows and highs that last period. We divide with 2 (multiply with 0.5 in input1) to find number of wavelengths in that periode. Then we multiply with the frequency of the counting-periods (input2) to get the actual VCO-frequency for that counting period. Finally, we also divide input1 with another 1000 (0.5*0.001=0.0005), just in order to get a number small enough to be presented in the Master panel.
[math]
    input1 = _COUNT * 0.0005
    input2 = _HERTZ
    product = _NEW_PITCH

# if _TICTOC, we put the last calculated pitch (including the 1000-scaling) into the pitch queue
[queue]
    input = _NEW_PITCH
    clock = _TICTOC
    output1 = _P1
    output2 = _P2
    output3 = _P3
    output4 = _P4
    output5 = _P5
    output6 = _P6
    output7 = _P7
    output8 = _P8

# we add up the pitch from the last 8 counting-periods, and find the average (_PITCH)
[math]
    input1 = _P1 + _P2
    input2 = _P3 + _P4
    sum = _P1234

[math]
    input1 = _P5 + _P6
    input2 = _P7 + _P8
    sum = _P5678

[math]
    input1 = _P1234 + _P5678
    input2 = 8
    quotient = _PITCH

# using the formula from url "en.wikipedia.org/wiki/MIDI_tuning_standard" to calculate relationship between midi note-number (d) and pitch (f) (note-frequency), which is: d = 69 + 12*log2(f/440 Hz)
# In this formula we use in the Droid calculations the mathematical relation between the natural logarithm ln and log2: log2(x) = ln(x)/ln(2)


# calculating the note-number (d) will be a decimal-number unless the VCO-frequency is spot on a correct pitch. We round this off to nearest integer to find the nearest note-number (D_INT):

# first, dividing f by 440 (or 0.440 in our case since we have stored all the pitches we have measured after dividing them by 1000), and taking the ln of that:
[math]
    input1 = _PITCH / 0.44
    logarithm = _PITCH_LN

# then calculating ln(2):
[math]
    input1 = 2
    logarithm = _LN2

# then calculating the rest of the formula for finding d
[math]
    input1 = _PITCH_LN * 12
    input2 = _LN2
    quotient = _TEMP1

[copy]
    input = _TEMP1 + 69
    output = _D

# finally rounding off to nearest whole d-value (whole note-number)
[math]
    input1 = _D
    round = _D_INT

# having found the whole note-number, we calculating back using the same same formula, what the correct frequency (_PITCH_IDEAL) will be for this whole pitch-number (D_INT):
[math]
    input1 = -1 * 69 + _D_INT
    input2 = 12
    quotient = _TEMP2

[math]
    input1 = 2
    input2 = _TEMP2
    power = _TEMP3

[copy]
    input = _TEMP3 * 0.44
    output = _PITCH_IDEAL

# find error-percentage of the actual VCO-frequency compared to the ideal pitch-frequency:
[math]
    input1 = -1 * _PITCH_IDEAL + _PITCH
    input2 = _PITCH_IDEAL
    quotient = _P_DIFF

# Taking modulo-12 of the whole note-number (_D_INT) is giving the note-name (_NOTE) (0=C, 1=C#, 2=D, etc)
[math]
    input1 = _D_INT
    input2 = 12
    modulo = _NOTE

# Taking INT-division with 12 (nearest whole number downwards) of the whole note-number (_D_INT) is giving the note-octav (_OCT) (for instance 4 as in A4):
[math]
    input1 = _D_INT / 12
    floor = _OCT

# depending on the value in _NOTE, we are setting one of the 12 different notes (_N1, _N2, etc) to 1, and the rest to 0.
[compare]
    input = _NOTE
    compare = 0
    ifequal = 1
    output = _N1

[compare]
    input = _NOTE
    compare = 1
    ifequal = 1
    output = _N2

[compare]
    input = _NOTE
    compare = 2
    ifequal = 1
    output = _N3

[compare]
    input = _NOTE
    compare = 3
    ifequal = 1
    output = _N4

[compare]
    input = _NOTE
    compare = 4
    ifequal = 1
    output = _N5

[compare]
    input = _NOTE
    compare = 5
    ifequal = 1
    output = _N6

[compare]
    input = _NOTE
    compare = 6
    ifequal = 1
    output = _N7

[compare]
    input = _NOTE
    compare = 7
    ifequal = 1
    output = _N8

[compare]
    input = _NOTE
    compare = 8
    ifequal = 1
    output = _N9

[compare]
    input = _NOTE
    compare = 9
    ifequal = 1
    output = _N10

[compare]
    input = _NOTE
    compare = 10
    ifequal = 1
    output = _N11

[compare]
    input = _NOTE
    compare = 11
    ifequal = 1
    output = _N12

# show the current nearest note in first column in B32. Since the "black" notes, like for instance C# is represented by lighting up both the C-botton and the D-button, the led for the C-button will light up if either C (_N1) or C# (_N2) equal to 1. The D-button will for instance light up for three different notes (C#, D, D#):
[copy]
    input = _N1 + _N2
    output = L2.25

[math]
    input1 = _N3
    input2 = _N2 + _N4
    sum = L2.21

[copy]
    input = _N5 + _N4
    output = L2.17

[copy]
    input = _N6 + _N7
    output = L2.13

[math]
    input1 = _N8
    input2 = _N7 + _N9
    sum = L2.9

[math]
    input1 = _N10
    input2 = _N9 + _N11
    sum = L2.5

[copy]
    input = _N12 + _N11
    output = L2.1

# show octave number in B32 column 2
[compare]
    input = _OCT
    compare = 0
    ifequal = 1
    output = L2.30

[compare]
    input = _OCT
    compare = 1
    ifequal = 1
    output = L2.26

[compare]
    input = _OCT
    compare = 2
    ifequal = 1
    output = L2.22

[compare]
    input = _OCT
    compare = 3
    ifequal = 1
    output = L2.18

[compare]
    input = _OCT
    compare = 4
    ifequal = 1
    output = L2.14

[compare]
    input = _OCT
    compare = 5
    ifequal = 1
    output = L2.10

[compare]
    input = _OCT
    compare = 6
    ifequal = 1
    output = L2.6

[compare]
    input = _OCT
    compare = 7
    ifequal = 1
    output = L2.2

# show difference between current and wanted pitch in % down to below 1% in B32 column 3
[compare]
    input = _P_DIFF
    compare = 0.02
    ifgreater = 1
    output = L2.3

[compare]
    input = _P_DIFF
    compare = 0.015
    ifgreater = 1
    output = L2.7

[compare]
    input = _P_DIFF
    compare = 0.01
    ifgreater = 1
    output = L2.11

[compare]
    input = _P_DIFF
    compare = -0.01
    ifgreater = 1
    output = L2.15

[compare]
    input = _P_DIFF
    compare = 0.01
    ifless = 1
    output = L2.19

[compare]
    input = _P_DIFF
    compare = -0.01
    ifless = 1
    output = L2.23

[compare]
    input = _P_DIFF
    compare = -0.015
    ifless = 1
    output = L2.27

[compare]
    input = _P_DIFF
    compare = -0.02
    ifless = 1
    output = L2.31

# show difference between current and wanted pitch in % down to below 0.25% in B32 column 4
[compare]
    input = _P_DIFF
    compare = 0.0075
    ifgreater = 1
    output = L2.4

[compare]
    input = _P_DIFF
    compare = 0.005
    ifgreater = 1
    output = L2.8

[compare]
    input = _P_DIFF
    compare = 0.0025
    ifgreater = 1
    output = L2.12

[compare]
    input = _P_DIFF
    compare = -0.0025
    ifgreater = 1
    output = L2.16

[compare]
    input = _P_DIFF
    compare = 0.0025
    ifless = 1
    output = L2.20

[compare]
    input = _P_DIFF
    compare = -0.0025
    ifless = 1
    output = L2.24

[compare]
    input = _P_DIFF
    compare = -0.005
    ifless = 1
    output = L2.28

[compare]
    input = _P_DIFF
    compare = -0.0075
    ifless = 1
    output = L2.32

# the whole time we show the _PITCH (the calculated current VCO-frequency) in the Master Panel (writing it to register X1). Except when pressing Button 1 or Button 29 on the B32. Button 1 will show the difference in percentage between the current VCO-value and the nearest note-pitch we are tuning towards (_P_DIFF), while Button 29 will show the correct frequency to the nearest note-pitch that we want (_PITCH_IDEAL).

# check if one and only one of the buttons are pressed (_BUTTON = 1)
[logic]
    input1 = B2.1
    input2 = B2.29
    xor = _BUTTON

# in case Button 1 is pressed, we multiply by 100 to represent the percentage error nicely in the Master Panel
[copy]
    input = _P_DIFF * 10
    output = _P_DIFF_100

# add the corresponding values of pressing both the buttons. In the cases that we will use this _BUTTON_VALUE later, only one of the button are pressed, so that one of the inputs will always be zero.
[math]
    input1 = B2.1 * _P_DIFF_100
    input2 = B2.29 * _PITCH_IDEAL
    sum = _BUTTON_VALUE

# if one and only one of the two actual buttons were pressed, we show that corresponding value while pressing the button, otherwise showing  the current VCO-frequency
[compare]
    input = _BUTTON
    compare = 1
    ifequal = _BUTTON_VALUE
    else = _PITCH
    output = X1
